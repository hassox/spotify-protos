package spotify.v1;

import "fender/v1/field_options.proto";
import "fender/v1.proto";
import "spotify/v1/models/common.proto";
import "spotify/v1/models/album.proto";

/** 
 * Get a list of the songs saved in the current Spotify user’s “Your Music” library. 
 * Authorization required
 */
message LibraryTracksRequest {
  /** The maximum number of objects to return. Default: 20. Minimum: 1. Maximum: 50. */
  optional uint32 limit = 1 [
    default = 20,
    (fender.v1.fender_field) = { min: 1, max: 50 }
  ];

  /**
   * The index of the first object to return.
   * Default: 0 (i.e., the first object).
   * Use with limit to get the next set of objects.
   */
  optional uint32 offset = 2 [ default = 0 ];
}

message LibraryTracksResponse {
  optional TrackPage tracks_page = 1;
}

message LibraryCheckTracksResponse {
  /** An array of true or false values, in the same order in which the ids were specified in the request */
  repeated bool tracks_present = 1;
}

message SimpleLibraryTracksRequest {

  /**
   * An array of the Spotify IDs. For example: 
   * ["4iV5W9uYEdYUVa79Axb7Rh", "1301WleyT98MSxVHPZCA6M"]
   *
   * A maximum of 100 items can be specified in one request. Note: if the ids parameter is present in the query string, any IDs listed here in the body will be ignored.
   */
  repeated string ids = 1 [(fender.v1.fender_field).present = true];
}

/**
 * Endpoints for retrieving information about, and managing, the songs that the current user has saved in their “Your Music” library.
 *
 * All endpoints require authorization
 */
service MusicLibrary {
  option (fender.v1.fender_service) = {
    address: "https://api.spotify.com",
    request_format: JSON,
    cors_enabled: true
  };

  /**
   * Get a list of the songs saved in the current Spotify user’s “Your Music” library. 
   */
  rpc Tracks (LibraryTracksRequest) returns (LibraryTracksResponse) {
    option (fender.v1.fender_method) = {
      http_method: GET,
      http_path: "/v1/me/tracks",
      response_body_field: { name: 'tracks_page' }
    };
  }

  /** 
   * Check Current User’s Saved Tracks
   * Check if one or more tracks is already saved in the current Spotify user’s “Your Music” library.
   */
  rpc CheckTracks (SimpleLibraryTracksRequest) returns (LibraryCheckTracksResponse) {
    option (fender.v1.fender_method) = {
      http_method: GET,
      http_path: "/v1/me/tracks/contains",
      response_body_field: { name: 'tracks_present' }
    };
  }

  /**
   * Save Tracks for Current User
   * Save one or more tracks to the current user’s “Your Music” library.
   * Authorization Required
   */
  rpc SaveTracks (SimpleLibraryTracksRequest) returns (Empty) {
    option (fender.v1.fender_method) = {
      http_method: PUT,
      http_path: "/v1/me/tracks",
      request_body_field: { name: "ids" }
    };
  }

  /**
   * Remove Tracks for Current User
   * Remove one or more tracks from the current user’s “Your Music” library.
   *
   * Authorization required
   */
  rpc DeleteTracks (SimpleLibraryTracksRequest) returns (Empty) {
    option (fender.v1.fender_method) = {
      http_method: PUT,
      http_path: "/v1/me/tracks",
      request_body_field: { name: "ids" },
      force_body_request: true
    };
  }
}
