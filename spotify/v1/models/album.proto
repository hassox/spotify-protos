package spotify.v1;

import "public/international/country_code.proto";
import "fender/v1/field_options.proto";
import "spotify/v1/models/artist.proto";
import "spotify/v1/models/common.proto";

/**
 * Represents a full album object
 */
message Album {

  /** Specifies the type of album */
  enum Type {
    album = 1;
    single = 2;
    compilation = 3;
  }

  /** The type of the album */
  optional Type album_type = 1;

  /**
   * The artists of the album. 
   * Each artist object includes a link in href to more detailed information about the artist.
   */
  repeated Artist artists = 2;

  /** 
   * The markets in which the album is available
   * Note that an album is considered available in a market when at least 1 of its tracks is available in that market.
   */
  repeated public.international.CountryCode available_markets = 3;

  /** Known external IDs for the album */
  optional ExternalId external_ids = 4;

  /** Known external URLs for this album */
  optional ExternalUrl external_urls = 5;

  /**
   * A list of the genres used to classify the album. 
   * For example: "Prog Rock", "Post-Grunge". 
   * (If not yet classified, the array is empty.) 
   */
  repeated string genres = 6;

  /** The Spotify ID for the album */
  optional string id = 7;

  /** The cover art for the album in various sizes, widest first. */
  repeated Image images = 8;
  
  /** The name of the album */
  optional string name = 9;

  /** 
   * The popularity of the album.
   * The value will be between 0 and 100, with 100 being the most popular. 
   * The popularity is calculated from the popularity of the album's individual tracks.
   */
  optional uint32 popularity = 10 [(fender.v1.fender_field).max = 100];

  /** 
   * The date the album was first released, for example "1981-12-15". 
   * Depending on the precision, it might be shown as "1981" or "1981-12".
   */
  optional string release_date = 11;

  /**
   * The precision with which release_date value is known
   */
  optional DatePrecision release_date_precision = 12;

  /** The tracks of the album. */
  repeated TrackPage tracks = 13;

  /** The object type 'album' */
  optional ObjectType type = 14 [ default = album ];

  /** The Spotify URI for the album */
  optional string uri = 15;
}

message AlbumPage {
  /** A link to the Web API endpoint returning the full result of the request. */
  optional string href = 1;

  /** The requested albums */
  repeated Album items = 2;

  /** The maximum number of items in the response (as set in the query or by default). */
  optional uint32 limit = 3;

  /** URL to the next page of items */
  optional string next = 4;

  /** The offset of the items returned (as set in the query or by default). */
  optional uint32 offset = 5;


  /** URL to the previous page of items */
  optional string previous = 6;

  /** The total number of items available to return. */
  optional uint32 total = 7;
}

message Track {
  /** 
   * The artists who performed the track.
   * Each artist object includes a link in href to more detailed information about the artist.
  */
  repeated Artist artists = 1;

  /** A list of the countries in which the track can be played */
  repeated public.international.CountryCode available_markets = 2;

  /** The disc number (usually 1 unless the album consists of more than one disc). */
  optional uint32 disc_number = 3;

  /** The track length in milliseconds. */
  optional uint32 duration_ms = 4;

  /**
   * Whether or not the track has explicit lyrics 
   * (true = yes it does; false = no it does not OR unknown).
   */
  optional bool explicit = 5;

  /** External URLs for this track. */
  optional ExternalUrl external_urls = 6;

  /** A link to the Web API endpoint providing full details of the track. */
  optional string href = 7;

  /** The Spotify ID for the track */
  optional string id = 8;

  /** The name of the track */
  optional string name = 9;

  /** A URL to a 30 second preview (MP3 format) of the track. */
  optional string preview_url = 10;

  /** 
   * The number of the track. 
   * If an album has several discs, the track number is the number on the specified disc.
   */
  optional uint32 track_number = 11;

  /** The object type: 'track' */
  optional ObjectType type = 12 [ default = track ];

  /** The Spotify URI for the track */
  optional string uri = 13;

  /** The timestamp for when the track was added to a playlist when returned in the context of a playlist */
  optional string added_at = 14;
}

message TrackPage {
  /** A link to the Web API endpoint returning the full result of the request. */
  optional string href = 1;

  /** The requested tracks */
  repeated Track items = 2;

  /** The maximum number of items in the response (as set in the query or by default). */
  optional uint32 limit = 3;

  /** URL to the next page of items */
  optional string next = 4;

  /** The offset of the items returned (as set in the query or by default). */
  optional uint32 offset = 5;

  /** URL to the previous page of items */
  optional string previous = 6;

  /** The total number of items available to return. */
  optional uint32 total = 7;
}
